version: '3.9'
services:
  # ----------------------------------- APPS
  # Prospero
  prospero:
    build: .
    restart: on-failure
    volumes:
      - ./logs/:/logs/
      - prospero:/app/logs
    env_file:
      - .env.production
    ports:
      - "5000:5000"
    networks:
      - prospero
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # ----------------------------------- DATABASES
  # ElasticSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    volumes:
      - ./resources/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health" ]
      interval: 3s
      timeout: 3s
      retries: 10
    ports:
      - "9200:9200"
    networks:
      - prospero
    environment:
      - network.host=0.0.0.0
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false

  # Postgres
  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    user: postgres
    environment:
      - "POSTGRES_USER=${POSTGRES_USERNAME:-postgres}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}"
      - "ES_JAVA_OPTS=-Xms1024m -Xmx3072m"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USERNAME}", "-d", "${POSTGRES_DATABASE}", "-W", "${POSTGRES_PASSWORD}" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - prospero

  # Redis
#  redis:
#    image: "bitnami/redis:latest"
#    restart: always
#    ports:
#      - '6379:6379'
#    environment:
#      - ALLOW_EMPTY_PASSWORD=yes
#    healthcheck:
#      test: [ "CMD", "redis-cli","ping" ]
#      interval: 5s
#      timeout: 5s
#      retries: 20
#    volumes:
#      - redis:/data
#    networks:
#      - prospero

  # ----------------------------------- METRICS
  # Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./resources/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - prospero
  # Grafana
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - prospero
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mskKote
    volumes:
      - ./resources/grafana.yml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana:/var/lib/grafana

  # ----------------------------------- LOGGER
  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.1
    volumes:
      - ./resources/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - prospero
  # Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.7.1
    entrypoint: filebeat -e -strict.perms=false
    volumes:
      - ./resources/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs/:/logs/
      - prospero:/app/logs
    networks:
      - prospero
  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.1
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://localhost:5601/api/status" ]
      interval: 3s
      timeout: 3s
      retries: 50
    ports:
      - "5601:5601"
    networks:
      - prospero
  # ----------------------------------- TRACING
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    networks:
      - prospero
    ports:
      - "16686:16686"
      - "14269:14269"
      - "${JAEGER_PORT:-14268}:14268"

# ----------------------------------- OTHER
networks:
  prospero:
    driver: bridge
# Persistent data stores https://docs.docker.com/engine/admin/volumes/volumes/
volumes:
  grafana:
  elasticsearch:
  kibana:
  prospero:
  postgres:
#  redis: